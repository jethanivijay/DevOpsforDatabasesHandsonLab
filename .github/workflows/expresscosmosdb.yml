name: Build and Deploy nodejs and cosmosdb
on:
  push:
    branches:
      - nodejscosmosdb
    paths:
    - readmedtrigger.md

env:
  AZURE_WEBAPP_NAME: "vijaynodejscosmoshol"    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: "Application"      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '8.11.1'                # set this to the node version to use
  RESOURCEGROUPNAME: "vijaynodejscosmoshol"
  LOCATION: "East US"
  HOSTINGPLANNAME: "vijaynodejscosmoshol"
  APPINSIGHTLOCATION: "eastus"
  SKU: "S1 Standard"
  DATABASEACCOUNTID: "vijaynodejscosmoshol"
  DATABASEACCOUNTLOCATION: "eastus"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: npm install and build
      continue-on-error: false
      run: |
        cd Application
        npm install
        npm run build --if-present
   
  Deploy:
    name: Deploy to azure web app
    needs: build
    runs-on: ubuntu-latest
    steps:
    # login to azure
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.ACTIONSDEPLOY }}

    # Deploy Arm template
    - uses: actions/checkout@v2
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.ACTIONSDEPLOY }}
        
    - name: Deploy ARM Template
      uses: azure/CLI@v1
      continue-on-error: false
      with:
        inlineScript: |
          az group create --name "${{ env.RESOURCEGROUPNAME }}" --location "${{ env.LOCATION }}"
          az deployment group create --resource-group "${{ env.RESOURCEGROUPNAME }}" --template-file ./armTemplates/windows-webapp-template.json --parameters webAppName="${{ env.AZURE_WEBAPP_NAME }}" hostingPlanName="${{ env.HOSTINGPLANNAME }}" appInsightsLocation="${{ env.APPINSIGHTLOCATION }}" sku="${{ env.SKU }}" databaseAccountId="${{ env.DATABASEACCOUNTID }}" databaseAccountLocation="${{ env.DATABASEACCOUNTLOCATION }}"

    - name: Fetch connection strings
      id: getConnectionStrings
      run: |
        sudo chmod  766 ./Application/connectionData.json
        echo "::set-output name=connectionstrings::`az cosmosdb keys list --name "${{ env.DATABASEACCOUNTID }}" --resource-group "${{ env.RESOURCEGROUPNAME }}" --type connection-strings --query connectionStrings[0].connectionString |xargs`"
        echo "::add-mask::`az cosmosdb keys list --name "${{ env.DATABASEACCOUNTID }}" --resource-group "${{ env.RESOURCEGROUPNAME }}" --type connection-strings --query connectionStrings[0].connectionString |xargs`"
        
    - name: Update connection string   
      uses: microsoft/variable-substitution@v1 
      with:
        files: './Application/connectionData.json'
      env:
        connectionString: "${{ steps.getConnectionStrings.outputs.connectionstrings }}"
   
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: npm install and build
      continue-on-error: false
      run: |
        cd Application
        npm install
        npm run build --if-present
   
    # Deploy web app
    - name: 'Deploy to Azure WebApp'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
